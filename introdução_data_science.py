# -*- coding: utf-8 -*-
"""Introdução Data Science

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pguZdgKO1zikv2vYYWhIqZov4e-q6pX3
"""

import pandas as pd

notas = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/main/Aula_0/ml-latest-small/ratings.csv")
notas

notas.columns = ["usuarioId", "filmeId", "nota", "momento"]
notas.head()

notas.shape

notas ["nota"].unique()

notas["nota"].value_counts()

notas["nota"].mean()

notas["nota"].plot(kind= 'hist')

notas["nota"].median()

mediana = notas["nota"].median()
media = notas["nota"].mean()
print(f"mediana é {mediana}")
print(f"media é {media}")

notas["nota"].describe()

import seaborn as sns
sns.boxplot(notas["nota"])

filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/main/Aula_0/ml-latest-small/movies.csv")
filmes.columns = ["filmeId", "titulo", "generos"]
filmes.head()

notas.head()

notas.query("filmeId==1")["nota"].mean()

notas.query("filmeId==2")["nota"].mean()

medias_por_filme = notas.groupby("filmeId")["nota"].mean()
medias_por_filme.head()

medias_por_filme = notas.groupby("filmeId")["nota"].mean()
medias_por_filme.head()

sns.boxplot(medias_por_filme)

medias_por_filme.describe()

import matplotlib.pyplot as plt

sns.displot(medias_por_filme, kde=True)
plt.title("Histograma das médias dos filmes")

tmdb = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/main/Aula_0/tmdb_5000_movies.csv")
tmdb.head()

sns.displot(tmdb["revenue"])
plt.title("Distribuição da receita")
plt.show()

# prompt: grafico de distribuição de orçamento dos filmes

sns.displot(tmdb["budget"])
plt.title("Distribuição do Orçamento")
plt.show()

tmdb.info()

tmdb.describe()

com_faturamento = tmdb.query("revenue > 0")
sns.displot(com_faturamento["revenue"])

tmdb["original_language"].unique()

tmdb["original_language"].value_counts()

# budget (orcamento) => quantitativa continua
# nota do movielens => 0.5, 1.0, 1.5 ... , 5.0 => não tem 2.5
# quantidade de votos => 1,2,3,4,5 ... não exite 2.5

tmdb ["original_language"].value_counts().plot.pie()

tmdb ["original_language"].value_counts().index

cont_lang= tmdb ["original_language"].value_counts().to_frame().reset_index()
cont_lang.columns = ["original_language", "total"]
cont_lang.head()

cont_lang.plot.bar(x="original_language", y="total")

sns.barplot(data=cont_lang, x="original_language", y="total")

cont_lang.plot(kind="pie", y= "total", labels=cont_lang["original_language"])

total_porlang = tmdb["original_language"].value_counts()
total_geral= total_porlang.sum()
total_ingles= total_porlang.loc["en"]
total_outros = total_geral - total_ingles
print(total_geral, total_ingles, total_outros)

dados= {
     "lingua" : ["ingles", "outros"],
"total" : [ total_ingles, total_outros]}
dados= pd.DataFrame(dados)
dados

sns.barplot(data=dados, x="lingua", y="total")

dados.plot.pie(y="total", labels=dados["lingua"])

tmdb.query("original_language == 'en'")["budget"].mean()

total_outrosfilmes_plang = tmdb.query("original_language != 'en'")["original_language"].value_counts()
total_outrosfilmes_plang.head()

sns.countplot(data=tmdb.query("original_language != 'en'"), x="original_language")

sns.countplot(data=tmdb.query("original_language != 'en'"),
              order=total_outrosfilmes_plang.index,
              hue="original_language",
              x="original_language")

sns.color_palette("mako")

plt.figure(figsize=(16, 8))
sns.countplot(data=tmdb.query("original_language != 'en'"),
              order=total_outrosfilmes_plang.index,
              palette="mako",
              hue="original_language",
              hue_order=total_outrosfilmes_plang.index,
              stat="percent",
              x="original_language")
plt.title("Distribuição da língua original nos filmes exceto em inglês")
plt.show()

filmes.head(2)

# prompt: extraia as notas dos dois filmes em variaveis distintas
notas_do_toy_story = notas.query("filmeId==1")["nota"]
notas_do_jumanji = notas.query("filmeId==2")["nota"]

media_do_toy_story = notas_do_toy_story.mean()
media_do_jumanji = notas_do_jumanji.mean()

print(media_do_toy_story, media_do_jumanji)

# prompt: mesmo mas com a mediana

mediana_do_toy_story = notas_do_toy_story.median()
mediana_do_jumanji = notas_do_jumanji.median()

print(mediana_do_toy_story, mediana_do_jumanji)

import numpy as np

filme1 = [2.5] * 10 + [3.5] * 10
filme2 = [5] * 10 + [1] * 10

media_filme1 = np.mean(filme1)
mediana_filme1 = np.median(filme1)

media_filme2 = np.mean(filme2)
mediana_filme2 = np.median(filme2)

print("Filme 1:")
print("Média:", media_filme1)
print("Mediana:", mediana_filme1)

print("\nFilme 2:")
print("Média:", media_filme2)
print("Mediana:", mediana_filme2)

plt.hist(filme1)
plt.hist(filme2)

plt.boxplot([filme1, filme2])

filme0 = [3.0] * 20 # espalha 0
np.mean(filme0)

np.std(filme0), np.std(filme1), np.std(filme2)

plt.boxplot([notas_do_toy_story, notas_do_jumanji])

sns.boxplot(data=notas.query("filmeId in [1,2,3,4,5]"),
            x="filmeId",
            y="nota")

# prompt: mesmo grafico mas colorido

sns.boxplot(data=notas.query("filmeId in [1,2,3,4,5]"),
            x="filmeId",
            y="nota",
            palette="Set2")

notas.groupby("filmeId").count()

notas["filmeId"].value_counts().tail()

notas.groupby("filmeId").count().query("nota == 1")